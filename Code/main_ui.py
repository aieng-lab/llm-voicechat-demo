# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtWidgets, QtGui
import sys
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.figure import Figure

class ImageWindow(QtWidgets.QMainWindow):
    def __init__(self, parent=None):
        super(ImageWindow, self).__init__(parent)
        self.data = None
        self.initUI()

    def initUI(self):
        self.setWindowTitle('Image Window')
        # self.setGeometry(100, 100, 800, 600)

        # Create a central widget
        central_widget = QtWidgets.QWidget(self)
        self.setCentralWidget(central_widget)

        # Create a layout for the central widget
        layout = QtWidgets.QVBoxLayout(central_widget)

        # Create a matplotlib figure and canvas
        fig = Figure(figsize=(10,10))
        self.canvas = FigureCanvas(fig)
        layout.addWidget(self.canvas)


    def plot(self):
        ax = self.canvas.figure.add_subplot(111)
        ax.axis('off')
        # ax.plot(self.data)
        
        ax.imshow(self.data)
        self.canvas.draw()
    
    def setData(self, data):
        self.data = data


class ChatWindow(QtWidgets.QWidget):
    """
    This "window" is a QWidget. If it has no parent, it
    will appear as a free-floating window as we want.
    """
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Chat")

        # Main layout
        main_layout = QtWidgets.QVBoxLayout()

        # Scroll area for chat messages
        self.chat_area = QtWidgets.QScrollArea()
        self.chat_area.setWidgetResizable(True)
        self.chat_widget = QtWidgets.QWidget()
        self.chat_layout = QtWidgets.QVBoxLayout(self.chat_widget)
        self.chat_layout.setAlignment(QtCore.Qt.AlignTop)  # Keep messages top-aligned
        self.chat_area.setWidget(self.chat_widget)

        # Styling for chat area
        self.chat_area.setStyleSheet("background-color: #f1f1f1; border: none;")

        # Add widgets to the main layout
        main_layout.addWidget(self.chat_area)

        # Set the main layout for ChatWindow
        self.setLayout(main_layout)

        # Add a spacer at the bottom to keep messages top-aligned without stretching
        self.chat_layout.addSpacerItem(
            QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding))

    def add_user_message(self, message):
        self.add_message(message, sender='You')

    def add_ai_message(self, message):
        self.add_message(message, sender='AI')

    def add_message(self, message, sender="You"):
        if not message:
            return

        message = message.strip()

        # Create a container widget for the message
        message_container = QtWidgets.QWidget()
        message_container_layout = QtWidgets.QHBoxLayout(message_container)
        message_container_layout.setContentsMargins(10, 5, 10, 5)

        # Create the message label
        message_label = QtWidgets.QLabel(message)
        message_label.setWordWrap(True)  # Allow text to wrap
        message_label.setMaximumWidth(400)  # Set a maximum width for the message bubble
        message_label.setSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)

        font_size = 20

        # Style and align the message bubble based on sender
        if sender == "You":
            message_label.setStyleSheet(f"background-color: #DCF8C6; border-radius: 15px; padding: 8px; font-size: {font_size}px;")
            message_container_layout.addStretch()  # Push the message to the right
            message_container_layout.addWidget(message_label)
        else:
            message_label.setStyleSheet(f"background-color: #DDDDDD; border-radius: 15px; padding: 8px; font-size: {font_size}px;")
            message_container_layout.addWidget(message_label)
            message_container_layout.addStretch()  # Push the message to the left

        # Add the message container to the main chat layout
        self.chat_layout.addWidget(message_container)

        # Ensure the chat layout is updated and the last message is fully visible
        self.chat_area.update()  # Redraw the chat area to ensure height is updated

        # Scroll to the latest message after layout is updated
        QtCore.QTimer.singleShot(50, lambda: self.chat_area.verticalScrollBar().setValue(self.chat_area.verticalScrollBar().maximum()))
        QtCore.QTimer.singleShot(200, lambda: self.chat_area.verticalScrollBar().setValue(self.chat_area.verticalScrollBar().maximum()))
        QtCore.QTimer.singleShot(1000, lambda: self.chat_area.verticalScrollBar().setValue(self.chat_area.verticalScrollBar().maximum()))

    def send_message(self):
        message = self.input_field.text()
        if message:
            self.add_message(message, sender="You")
            self.input_field.clear()



class HoldButton(QtWidgets.QPushButton):
    def __init__(self, label, parent=None):
        super().__init__(label, parent)
        self.setCheckable(True)

    def mousePressEvent(self, event):
        self.setDown(True)
        self.pressed.emit()
        super().mousePressEvent(event)

    def mouseReleaseEvent(self, event):
        self.setDown(False)
        self.released.emit()
        super().mouseReleaseEvent(event)
        
        
class Ui_MainWindow(object):
    def __init__(self, params) -> None:
        self.params=params
    
    def setupUi(self, MainWindow, window_size):
        MainWindow.setObjectName("MainWindow")
        self.window_size = (window_size.width(), window_size.height())
        self.status_size = int(0.03 * self.window_size[0])
        self.button_text_size = int(0.5 * self.status_size)
        MainWindow.resize(self.window_size[0], self.window_size[1])
        
        #Main widget (background)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setStyleSheet("background-color: rgb(0, 0, 0);border: 0px;")
        self.centralwidget.setObjectName("centralwidget")
        #Main layout
        self.gridLayout_1 = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout_1.setObjectName("gridLayout_1")
        
        self.gridLayout_2 = QtWidgets.QGridLayout()
        self.gridLayout_2.setObjectName("gridLayout_2")
        spacerItem = QtWidgets.QSpacerItem(self.window_size[0], #width
                                           int(0.2 * self.window_size[1]), #height
                                           QtWidgets.QSizePolicy.Expanding,
                                           QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_2.addItem(spacerItem, 1, 1, 1, 1)
        self.groupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox.setObjectName("groupBox")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.groupBox)
        self.verticalLayout.setObjectName("verticalLayout")
        
        
        self.gridLayout_3= QtWidgets.QGridLayout()
        self.gridLayout_3.setAlignment(QtCore.Qt.AlignCenter)
        self.gridLayout_3.setObjectName("gridLayout_3")
        
        self.label_6 = QtWidgets.QLabel(self.groupBox)
        self.label_6.setObjectName("label_6")
        ###
        self.label_6.setStyleSheet(f''' font-size: {self.status_size}px; color: Red;''')
        # self.label_6.setIndent(60)
        ###
        self.gridLayout_3.addWidget(self.label_6, 2, 0, 1, 1)
        self.verticalLayout.addLayout(self.gridLayout_3)
        
        self.gridLayout_2.addWidget(self.groupBox, 3, 1, 1, 1)
        
        self.groupBox1 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox1.setObjectName("groupBox1")
        
        self.verticalLayout1 = QtWidgets.QVBoxLayout(self.groupBox1)
        self.verticalLayout1.setObjectName("verticalLayout1")
        
        self.buttonsLayout = QtWidgets.QVBoxLayout()
        self.buttonsLayout.setObjectName("buttonsLayout")
        ###
        #Left, above, right, under
        self.buttonsLayout.setContentsMargins(int(0.1 * self.window_size[0]), int(0.05 * self.window_size[1]), int(0.1 * self.window_size[0]), 0)
        ###
        
        self.gridLayout_4 = QtWidgets.QGridLayout()
        self.gridLayout_4.setObjectName("gridLayout_4")
        
        self.gridLayout_5 = QtWidgets.QGridLayout()
        self.gridLayout_5.setObjectName("gridLayout_5")
        
        self.startButton = QtWidgets.QPushButton(self.groupBox1)
        self.startButton.setObjectName("startButton")
        ###
        self.startButton.setStyleSheet(f'background-color: #555555; font-size: {self.button_text_size}px; color: white;')
        ###
        

        self.gridLayout_4.addWidget(self.startButton, 0, 0, 1, 1)
        
        self.resetButton = QtWidgets.QPushButton(self.groupBox1)
        self.resetButton.setObjectName("resetButton")
        ###
        self.resetButton.setStyleSheet(f'background-color: #555555; font-size: {self.button_text_size}px; color: white;')
        ###
        
        self.gridLayout_4.addWidget(self.resetButton, 0, 1, 1, 1)
        
        
        self.imageWindow = ImageWindow()
        self.chatWindow = ChatWindow()
        self.chatButton = QtWidgets.QPushButton(self.groupBox1)
        self.chatButton.setStyleSheet(f'background-color: #555555; font-size: {self.button_text_size}px; color: white;')
        
        self.gridLayout_5.addWidget(self.chatButton, 0, 1, 1, 1)
        

        if self.params["type"] == "push_to_talk":
            self.pushToTalk = HoldButton(label="pushToTalk" ,parent=self.groupBox1)
        else:
            self.pushToTalk = QtWidgets.QPushButton(self.groupBox1)
            self.pushToTalk.setObjectName("pushToTalk")

        ###
        self.pushToTalk.setStyleSheet(f'background-color: #555555; font-size: {self.button_text_size}px; color: white;')
        ###
        

        self.gridLayout_5.addWidget(self.pushToTalk, 0, 0, 1, 1)
        
        self.buttonsLayout.addLayout(self.gridLayout_4)
        self.buttonsLayout.addLayout(self.gridLayout_5)
        
        self.verticalLayout1.addLayout(self.buttonsLayout)
        
        self.gridLayout_2.addWidget(self.groupBox1, 4, 1, 1, 1)
        
        
        self.gridLayout_1.addLayout(self.gridLayout_2, 0, 0, 1, 1)
        
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        
        QtCore.QMetaObject.connectSlotsByName(MainWindow)



    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        if 'app_desc' in self.params:
            MainWindow.setWindowTitle(_translate("MainWindow", f"{self.params['app_name'].upper()} - {self.params['app_desc']}"))
        else:
            MainWindow.setWindowTitle(_translate("MainWindow", f"{self.params['app_name'].upper()}"))
        self.label_6.setText(_translate("MainWindow", "Ich schlafe  ..."))
        self.startButton.setText(_translate("MainWindow", "Starte Gespräch"))
        self.resetButton.setText(_translate("MainWindow", "Beende Antwort"))
        self.chatButton.setText(_translate("MainWindow", "Zeige Gespräch an"))
        self.pushToTalk.setText(_translate("MainWindow", "Klick zum Anfragen"))


if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
